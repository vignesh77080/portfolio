{"version":3,"sources":["container/ParentContainer/ParentContainer.module.css","components/viewContact/viewList/viewList.module.css","components/viewContact/viewcontact/viewContact.module.css","container/Messaging/Messaging.module.css","components/Input/Input.module.css","container/LoggedUser/LoggedUser.module.css","container/AddContact/AddContact.module.css","container/EditForm/EditForm.module.css","components/Message/Message.module.css","components/Backdrop/Backdrop.module.css","components/Button/Button.js","components/Input/Input.js","components/Backdrop/Backdrop.js","container/AddContact/AddContact.js","container/EditForm/EditForm.js","components/viewContact/ultilities/ultilityFunctions.js","components/viewContact/viewList/viewList.js","components/viewContact/viewcontact/viewContact.js","container/hoc/store/Action/action.js","container/hoc/store/Action/actionTypes.js","container/ParentContainer/ParentContainer.js","container/LoggedUser/LoggedUser.js","components/Message/Message.js","container/Messaging/Messaging.js","App.js","serviceWorker.js","container/hoc/store/Reducers/rootReducer.js","index.js"],"names":["module","exports","Button","props","onClick","clicked","disabled","className","classes","button","children","Input","inputClasses","styleClass","invalid","push","hasError","inputWrap","join","elementProps","value","onChange","changed","label","Backdrop","show","AddContact","state","contactForm","FullName","elementType","type","autoComplete","name","validation","minLenght","isRequired","touched","IsValid","Email","regexExp","PhoneNumber","CompanyName","Address","formValid","onHandleChange","event","items","newContact","updatingContact","target","length","checkValidity","i","setState","onHandleChangeEdit","onclearValues","close","newform","retBool","trim","test","form","addForm","onSubmit","e","submit","Object","keys","this","map","key","addFormWrap","React","Component","item","submitEdit","id","splitFunction","fullname","full","split","randomColor","Math","floor","random","toString","findLogged","arrList","filter","logged","viewList","joinClasses","msgIconDisabled","svg","title","clickedEdit","icon","faEdit","clickedMessage","faEnvelope","basicInfo","style","background","bgColor","twoLetters","email","company","viewContact","viewContactitems","bgColorIndex","personInfo","onClickMessIcon","ParentContainer","editForm","editItem","onShowAddform","onSubmitAddForm","preventDefault","onSubmitAddContact","onRandomColors","onviewContact","index","document","querySelectorAll","viewcontactList","active","forEach","classList","remove","closest","add","onViewspecific","onhandleClickEdit","onCloseEditForm","onSubmitEditForm","data","onSubmitEditContact","contactArr","showAddContact","viewContactList","showEditContact","selectText","listUl","onClickMessageIcon","previewContact","rootContainer","addcontact","contactWrap","previewcontact","connect","dispatch","actionTypes","LoggedUser","showDrop","loggedUser","onHandleClick","onClickChange","checkLogExits","change","onClickChangeUser","querySelector","innerHTML","user","listitems","downArrow","faCaretDown","Message","messageArr","messages","To","toPerson","From","styleUnlogged","alignSelf","textAlign","messageChat","message","nonLi","Messaging","inputElement","placeholder","errorMsg","newMessage","onclickSendButton","contact","messageFrom","Date","now","onAddMsg","openMsgModal","onCloseMsg","messagingWrap","messageBox","faPaperPlane","action","App","faAddressBook","Boolean","window","location","hostname","match","initialState","rootReducer","newContactObj","Contacteditted","newContactedit","store","createStore","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.f944efee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rootContainer\":\"ParentContainer_rootContainer__2o32V\",\"addcontact\":\"ParentContainer_addcontact__ouC8V\",\"viewcontactList\":\"ParentContainer_viewcontactList__4xSTB\",\"contactWrap\":\"ParentContainer_contactWrap__2046U\",\"previewcontact\":\"ParentContainer_previewcontact__3qoth\",\"selectText\":\"ParentContainer_selectText__1cVe5\",\"active\":\"ParentContainer_active__3wfIw\",\"listUl\":\"ParentContainer_listUl__1WuST\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"svg\":\"viewList_svg__SX9Bm\",\"basicInfo\":\"viewList_basicInfo__1wbXs\",\"messagesCount\":\"viewList_messagesCount__18Nb-\",\"company\":\"viewList_company__15_Sv\",\"name\":\"viewList_name__2ZOIC\",\"twoLetters\":\"viewList_twoLetters__1N4gG\",\"disabled\":\"viewList_disabled__2C2Or\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewContactitems\":\"viewContact_viewContactitems__2C9uW\",\"basicInfo\":\"viewContact_basicInfo__3ZL78\",\"name\":\"viewContact_name__3ijzY\",\"twoLetters\":\"viewContact_twoLetters__3ap6l\",\"personInfo\":\"viewContact_personInfo__V0vA0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messagingWrap\":\"Messaging_messagingWrap__oIpGH\",\"message\":\"Messaging_message__3uGil\",\"messageBox\":\"Messaging_messageBox__QqdhC\",\"disabled\":\"Messaging_disabled__3apUP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputWrap\":\"Input_inputWrap__JXHB0\",\"styleClass\":\"Input_styleClass__vnZ8W\",\"hasError\":\"Input_hasError__1wWEb\",\"error\":\"Input_error__1ntJq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loggedUser\":\"LoggedUser_loggedUser__3mL9b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addForm\":\"AddContact_addForm__3nTSO\",\"addFormWrap\":\"AddContact_addFormWrap__1Bodn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addForm\":\"EditForm_addForm__1kFwE\",\"addFormWrap\":\"EditForm_addFormWrap__14Hn_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageChat\":\"Message_messageChat__1KvsN\",\"nonLi\":\"Message_nonLi__20Pif\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3uj83\"};","import React from 'react';\r\nimport classes from './Button.module.css'\r\n\r\nlet Button = (props) =>{\r\n    return (\r\n        <button \r\n            onClick={props.clicked}\r\n            disabled ={props.disabled}\r\n            className={classes.button}> {props.children} </button>\r\n    )\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nlet Input = (props) => {\r\n\r\n    let inputClasses =[props.styleClass ? classes.styleClass : null]\r\n    if(props.invalid && props.styleClass){\r\n        inputClasses.push(classes.hasError)\r\n    }\r\n    \r\n    return (\r\n        <div className={classes.inputWrap}>\r\n            <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementProps}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            <label> {props.label} </label>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nimport classes from './Backdrop.module.css';\r\n\r\nlet Backdrop= (props) => {\r\n    return props.show ? <div onClick={props.clicked} className={classes.Backdrop}></div> : null\r\n};\r\n\r\nexport default Backdrop;","import React from 'react';\r\n\r\nimport Button from '../../components/Button/Button';\r\nimport Input from '../../components/Input/Input';\r\nimport Backdrop from '../../components/Backdrop/Backdrop';\r\nimport classes from './AddContact.module.css';\r\n\r\nclass AddContact extends React.Component {\r\n\r\n    state = {\r\n        contactForm : {\r\n            FullName : {\r\n                elementType : \"input\",\r\n                elementProps : {\r\n                    type : \"text\",\r\n                    autoComplete : \"off\",\r\n                    name : 'FullName'\r\n                },\r\n                label : \"Full Name\",\r\n                styleClass : false,\r\n                value : '' ,\r\n                validation : {\r\n                    minLenght : 5,\r\n                    isRequired : true,\r\n                },\r\n                touched : false,\r\n                IsValid : false\r\n            },\r\n            Email : {\r\n                elementType : \"input\",\r\n                elementProps : {\r\n                    type : \"text\",\r\n                    name : \"Email\",\r\n                    autoComplete : \"off\",\r\n                },\r\n                label : \"Email ID\",\r\n                styleClass : false,\r\n                value : '',\r\n                validation : {\r\n                    isRequired : true,\r\n                    regexExp : /^([\\w\\-.]+)@((([\\w-]+\\.)+)([a-zA-Z]{2,4}))$/\r\n                },\r\n                touched : false,\r\n                IsValid : false\r\n            },\r\n            PhoneNumber : {\r\n                elementType : \"input\",\r\n                elementProps : {\r\n                    type : \"text\",\r\n                    name : \"PhoneNumber\",\r\n                    autoComplete : \"off\"\r\n                },\r\n                value : '',\r\n                label : \"Phone Number\",\r\n                styleClass : false,\r\n                validation : {\r\n                    isRequired : true,\r\n                    regexExp : /^\\d{10}$/\r\n                },\r\n                touched : false,\r\n                IsValid : false\r\n            },\r\n            CompanyName : {\r\n                elementType : \"input\",\r\n                elementProps : {\r\n                    type : \"text\",\r\n                    name : \"CompanyName\",\r\n                    autoComplete : \"off\",\r\n                },\r\n                label : \"Company Name\",\r\n                styleClass : false,\r\n                value : '' ,\r\n                validation : {\r\n                    isRequired : false,\r\n                },\r\n                touched : false,\r\n                IsValid : true\r\n            },\r\n            Address : {\r\n                elementType : \"input\",\r\n                elementProps : {\r\n                    type : \"text\",\r\n                    name: \"Address\",\r\n                    autoComplete : \"off\",\r\n                },\r\n                validation : {\r\n                    isRequired : false,\r\n                },\r\n                value : '',\r\n                label : \"Address\",\r\n                styleClass : false,\r\n                touched : false,\r\n                IsValid : true\r\n            }\r\n        },\r\n        formValid : false\r\n    }\r\n\r\n    checkValidity(value, validation){\r\n        let retBool = true;\r\n\r\n        if(validation.isRequired){\r\n            retBool =  value.trim() !== \"\" && retBool\r\n        }\r\n\r\n        if(validation.minLenght){\r\n            retBool = value.length >= validation.minLenght && retBool\r\n        }\r\n\r\n        if(validation.regexExp){\r\n            retBool = validation.regexExp.test(value) && retBool;\r\n        }\r\n\r\n        return retBool;\r\n\r\n    }\r\n\r\n    onHandleChange = (event, items) =>{\r\n        let newContact = { ...this.state.contactForm };\r\n        let updatingContact = { ...newContact[items] };\r\n        updatingContact.value = event.target.value;\r\n        updatingContact.touched = false\r\n        if(updatingContact.value.length > 0){\r\n            updatingContact.touched = true\r\n        }\r\n        updatingContact.IsValid = this.checkValidity(updatingContact.value, updatingContact.validation);\r\n        newContact[items] = updatingContact;\r\n        let formValid = true;\r\n        for(let i in newContact){\r\n            formValid = newContact[i].IsValid && formValid\r\n        }\r\n        this.setState({\r\n            contactForm : newContact,\r\n            formValid : formValid\r\n        })\r\n    }\r\n\r\n    onHandleChangeEdit = (event, items) =>{\r\n        let newContact = { ...this.state.contactForm };\r\n        let updatingContact = { ...newContact[items] };\r\n        updatingContact.value = event.target.value;\r\n        updatingContact.touched = false\r\n        if(updatingContact.value.length > 0){\r\n            updatingContact.touched = true\r\n        }\r\n        updatingContact.IsValid = this.checkValidity(updatingContact.value, updatingContact.validation);\r\n        newContact[items] = updatingContact;\r\n        let formValid = true;\r\n        for(let i in newContact){\r\n            formValid = newContact[i].IsValid && formValid\r\n        }\r\n        this.setState({\r\n            contactForm : newContact,\r\n            formValid : formValid\r\n        })\r\n    }\r\n\r\n    onclearValues = () => {\r\n        this.props.close();\r\n        let newform = { ...this.state.contactForm }\r\n        for(let i in newform){\r\n            newform[i].value = ''\r\n        }\r\n        this.setState({\r\n            contactForm : newform\r\n        })\r\n    }\r\n\r\n    render(){\r\n        \r\n        let form = (\r\n                <div className={classes.addForm}>\r\n                    <form onSubmit={(e) =>this.props.submit(e, this.state.contactForm)}>\r\n                        {Object.keys(this.state.contactForm).map((items)=>(\r\n                            <Input \r\n                                key = { items }\r\n                                styleClass = {this.state.contactForm[items].touched}\r\n                                label = {this.state.contactForm[items].label}\r\n                                invalid = { !this.state.contactForm[items].IsValid }\r\n                                //shouldValidate = {this.state.contactForm[items].validation}\r\n                                elementProps = {this.state.contactForm[items].elementProps}\r\n                                changed = { (e) => this.onHandleChange(e, items) }\r\n                                value = {this.state.contactForm[items].value} />\r\n                        ))}\r\n                        <Button disabled={!this.state.formValid}> Add Contact </Button>\r\n                    </form>\r\n                    <Button clicked={this.onclearValues} disabled={false}> Close </Button>\r\n                </div>\r\n            )\r\n\r\n        return (\r\n            <div className={classes.addFormWrap}>\r\n                <Backdrop clicked={this.props.close} show={this.props.show}/>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n\r\n};\r\n\r\nexport default AddContact;","import React from 'react';\r\n\r\nimport Button from '../../components/Button/Button';\r\nimport Input from '../../components/Input/Input';\r\nimport Backdrop from '../../components/Backdrop/Backdrop';\r\nimport classes from './EditForm.module.css';\r\n\r\nclass AddContact extends React.Component {\r\n\r\n    state = {\r\n        contactForm : {\r\n            FullName : {\r\n                elementType : \"input\",\r\n                elementProps : {\r\n                    type : \"text\",\r\n                    autoComplete : \"off\",\r\n                    name : 'FullName'\r\n                },\r\n                label : \"Full Name\",\r\n                styleClass : false,\r\n                value : this.props.item[\"FullName\"] ,\r\n                validation : {\r\n                    minLenght : 5,\r\n                    isRequired : true,\r\n                },\r\n                touched : true,\r\n                IsValid : true\r\n            },\r\n            Email : {\r\n                elementType : \"input\",\r\n                elementProps : {\r\n                    type : \"text\",\r\n                    name : \"Email\",\r\n                    autoComplete : \"off\",\r\n                },\r\n                label : \"Email ID\",\r\n                styleClass : true,\r\n                value : this.props.item[\"Email\"],\r\n                validation : {\r\n                    isRequired : true,\r\n                    regexExp : /^([\\w\\-.]+)@((([\\w-]+\\.)+)([a-zA-Z]{2,4}))$/\r\n                },\r\n                touched : true,\r\n                IsValid : true\r\n            },\r\n            PhoneNumber : {\r\n                elementType : \"input\",\r\n                elementProps : {\r\n                    type : \"text\",\r\n                    name : \"PhoneNumber\",\r\n                    autoComplete : \"off\"\r\n                },\r\n                value : this.props.item[\"PhoneNumber\"],\r\n                label : \"Phone Number\",\r\n                styleClass : true,\r\n                validation : {\r\n                    isRequired : true,\r\n                    regexExp : /^\\d{10}$/\r\n                },\r\n                touched : true,\r\n                IsValid : true\r\n            },\r\n            CompanyName : {\r\n                elementType : \"input\",\r\n                elementProps : {\r\n                    type : \"text\",\r\n                    name : \"CompanyName\",\r\n                    autoComplete : \"off\",\r\n                },\r\n                label : \"Company Name\",\r\n                styleClass : true,\r\n                value : this.props.item[\"CompanyName\"] ,\r\n                validation : {\r\n                    isRequired : false,\r\n                },\r\n                touched : true,\r\n                IsValid : true\r\n            },\r\n            Address : {\r\n                elementType : \"input\",\r\n                elementProps : {\r\n                    type : \"text\",\r\n                    name: \"Address\",\r\n                    autoComplete : \"off\",\r\n                },\r\n                validation : {\r\n                    isRequired : false,\r\n                },\r\n                value : this.props.item[\"Address\"],\r\n                label : \"Address\",\r\n                styleClass : true,\r\n                touched : true,\r\n                IsValid : true\r\n            }\r\n        },\r\n        formValid : true\r\n    }\r\n\r\n    checkValidity(value, validation){\r\n        let retBool = true;\r\n\r\n        if(validation.isRequired){\r\n            retBool =  value.trim() !== \"\" && retBool\r\n        }\r\n\r\n        if(validation.minLenght){\r\n            retBool = value.length >= validation.minLenght && retBool\r\n        }\r\n\r\n        if(validation.regexExp){\r\n            retBool = validation.regexExp.test(value) && retBool;\r\n        }\r\n\r\n        return retBool;\r\n\r\n    }\r\n\r\n    onHandleChangeEdit = (event, items) =>{\r\n        let newContact = { ...this.state.contactForm };\r\n        let updatingContact = { ...newContact[items] };\r\n        updatingContact.value = event.target.value;\r\n        updatingContact.touched = false\r\n        if(updatingContact.value.length > 0){\r\n            updatingContact.touched = true\r\n        }\r\n        updatingContact.IsValid = this.checkValidity(updatingContact.value, updatingContact.validation);\r\n        newContact[items] = updatingContact;\r\n        let formValid = true;\r\n        for(let i in newContact){\r\n            formValid = newContact[i].IsValid && formValid\r\n        }\r\n        this.setState({\r\n            contactForm : newContact,\r\n            formValid : formValid\r\n        })\r\n    }\r\n\r\n    onclearValues = () => {\r\n        this.props.close();\r\n        let newform = { ...this.state.contactForm }\r\n        for(let i in newform){\r\n            newform[i].value = ''\r\n        }\r\n        this.setState({\r\n            contactForm : newform\r\n        })\r\n    }\r\n\r\n    render(){\r\n        \r\n        let form = (\r\n                <div className={classes.addForm}>\r\n                    <form onSubmit={(e) =>this.props.submitEdit(e, this.state.contactForm, this.props.item.id)}>\r\n                        {Object.keys(this.state.contactForm).map((items)=>(\r\n                            <Input \r\n                                key = { items }\r\n                                styleClass = { this.state.contactForm[items].touched}\r\n                                label = {this.state.contactForm[items].label}\r\n                                invalid = { !this.state.contactForm[items].IsValid }\r\n                                // shouldValidate = {this.state.contactForm[items].validation}\r\n                                elementProps = {this.state.contactForm[items].elementProps}\r\n                                changed = { (e) => this.onHandleChangeEdit(e, items) }\r\n                                value = {this.state.contactForm[items].value} />\r\n                        ))}\r\n                        <Button disabled={!this.state.formValid}> Edit Contact </Button>\r\n                    </form>\r\n                    <Button clicked={this.onclearValues} disabled={false}> Close </Button>\r\n                </div>\r\n            )\r\n\r\n        return (\r\n            <div className={classes.addFormWrap}>\r\n                <Backdrop clicked={this.props.close} show={this.props.show}/>\r\n                {form}\r\n            </div>\r\n        )\r\n    }\r\n\r\n};\r\n\r\nexport default AddContact;","export const splitFunction = (fullname) =>{\r\n    let full = fullname.trim().split(' ');\r\n    let firstLet = full[0][0]\r\n    let secondLet = full.length > 1 ? full[1][0] : full[0][fullname.length - 1];\r\n    return firstLet+secondLet\r\n}\r\n\r\nexport const randomColor = () =>{\r\n    return Math.floor(Math.random() * 16777216).toString(16)\r\n}\r\n\r\nexport const findLogged = (arrList) =>{\r\n    let findLogged = arrList.filter(items => items.logged === true);\r\n    let loggedName = findLogged.length > 0 ? findLogged[0].FullName : null\r\n    return loggedName\r\n}","import React from 'react';\r\n\r\nimport classes from './viewList.module.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit, faEnvelope } from '@fortawesome/free-solid-svg-icons';\r\nimport { splitFunction } from '../ultilities/ultilityFunctions';\r\n\r\n\r\nlet viewList = (props) =>{\r\n\r\n    let joinClasses = [props.msgIconDisabled === null ? classes.disabled : null, \"MessageIcon\" ]\r\n\r\n    return (\r\n        <li onClick={props.clicked}>\r\n            {props.svg ? <div className={classes.svg}>\r\n                <FontAwesomeIcon title={\"Edit Contact\"} onClick={props.clickedEdit} className={\"editIcon\"} icon={faEdit} />\r\n                <FontAwesomeIcon title={\"Message\"} onClick={props.clickedMessage} className={joinClasses.join(' ')} icon={faEnvelope} />\r\n            </div> : null}\r\n            <div className={classes.basicInfo}>\r\n                <span \r\n                    style={{\r\n                        background : `#${props.bgColor}`\r\n                    }}\r\n                    className={classes.twoLetters}>{splitFunction(props.fullname)}</span>\r\n                <p className={classes.name}> \r\n                    {props.fullname} \r\n                    <span> {props.email} </span>\r\n                </p>\r\n            </div>\r\n            <div className={classes.company}>\r\n                {props.company}\r\n            </div>\r\n        </li>\r\n    ) ;\r\n};\r\n\r\nexport default viewList;","import React from 'react';\r\n\r\nimport classes from './viewContact.module.css';\r\nimport { splitFunction } from '../ultilities/ultilityFunctions';\r\n\r\nlet viewContact = (props) =>{\r\n\r\n const { FullName, Email, CompanyName, PhoneNumber, Address } = props.items\r\n\r\n    return (\r\n        <div className={classes.viewContactitems}>\r\n            <div className={classes.basicInfo}>\r\n                <span \r\n                    style={{\r\n                        background : `#${props.bgColorIndex}`\r\n                    }}\r\n                    className={classes.twoLetters}>{splitFunction(FullName)}</span>\r\n                <p className={classes.name}> \r\n                    {FullName} \r\n                </p>\r\n            </div>\r\n            <div className={classes.personInfo}>\r\n                <div>\r\n                    <span>FullName:</span> <span>{FullName}</span>\r\n                </div>\r\n                <div>\r\n                    <span>Email:</span> <span>{Email}</span>\r\n                </div>\r\n                <div>\r\n                    <span>Phone:</span> <span>{PhoneNumber}</span>\r\n                </div>\r\n                <div>\r\n                    <span>Company:</span> <span>{CompanyName ? CompanyName : \"No information provided\"}</span>\r\n                </div>\r\n                <div>\r\n                    <span>Address</span> <span>{Address ? Address : \"No information provided\"}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default viewContact;","import * as actionTypes from './actionTypes';\r\n\r\nexport const onSubmitAddForm = (value) => {\r\n    return {\r\n        type : actionTypes.ONSUBMIT_ADDCONTACT,\r\n        value : value\r\n    }\r\n}\r\n\r\nexport const onviewContact = (value) => {\r\n    return {\r\n        type : actionTypes.ONVIEWCONTACT,\r\n        value : value\r\n    }\r\n}\r\n\r\nexport const onSubmitEditForm = (value) => {\r\n    return {\r\n        type : actionTypes.ONSUBMIT_EDITCONTACT,\r\n        value : value\r\n    }\r\n}\r\n\r\nexport const onclickLogUser = value =>{\r\n    return {\r\n        type : actionTypes.ONCHANGE_LOGUSER,\r\n        value : value\r\n    }\r\n}\r\n\r\nexport const onClickMessIcon = value =>{\r\n    return {\r\n        type : actionTypes.ONCLICK_MSGBOX,\r\n        value : value\r\n    }\r\n}\r\n\r\nexport const onAddContactMsg = value =>{\r\n    return {\r\n        type : actionTypes.ONADD_MSGUSER,\r\n        value : value\r\n    }\r\n}\r\n\r\nexport const onGenerateColor = value =>{\r\n    return {\r\n        type : actionTypes.RANDOM_BGCOLOR,\r\n        value : value\r\n    }\r\n}","export const ONSUBMIT_ADDCONTACT = \"ONSUBMIT_ADDCONTACT\";\r\nexport const ONSUBMIT_EDITCONTACT = \"ONSUBMIT_EDITCONTACT\";\r\nexport const ONVIEWCONTACT = \"ONVIEWCONTACT\";\r\n\r\nexport const ONCHANGE_LOGUSER = \"ONCHANGE_LOGUSER\";\r\nexport const ONCLICK_MSGBOX = \"ONCLICK_MSGBOX\";\r\nexport const ONADD_MSGUSER = \"ONADD_MSGUSER\";\r\n\r\nexport const RANDOM_BGCOLOR = \"RANDOM_BGCOLOR\";","import React from 'react';\r\n\r\nimport classes from './ParentContainer.module.css';\r\nimport Button from '../../components/Button/Button';\r\nimport AddContact from '../AddContact/AddContact';\r\nimport EditContact from '../EditForm/EditForm';\r\nimport ViewList from '../../components/viewContact/viewList/viewList';\r\nimport ViewContact from '../../components/viewContact/viewcontact/viewContact';\r\nimport * as actionTypes from '../hoc/store/Action/action';\r\nimport { findLogged } from '../../components/viewContact/ultilities/ultilityFunctions';\r\nimport { connect } from 'react-redux';\r\nimport { randomColor } from '../../components/viewContact/ultilities/ultilityFunctions';\r\n\r\nclass ParentContainer extends React.Component{\r\n\r\n    state = {\r\n        addForm : false,\r\n        editForm : false,\r\n        editItem : null,\r\n        bgColorIndex : null\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.contactArr.map(items =>(\r\n            this.props.onRandomColors(randomColor())\r\n        ))\r\n    }\r\n\r\n    onShowAddform = ()=>{\r\n        this.setState({\r\n            addForm : !this.state.addForm\r\n        })\r\n    }\r\n\r\n    onSubmitAddForm = (e, items) => {\r\n        e.preventDefault();\r\n        this.props.onSubmitAddContact(items);\r\n        this.props.onRandomColors(randomColor())\r\n        this.setState({\r\n            addForm : !this.state.addForm\r\n        })\r\n    }\r\n\r\n    onviewContact = (e, index) =>{\r\n        let target = e.target;\r\n        document.querySelectorAll(\".\"+classes.viewcontactList+\" .\"+classes.active).forEach(\r\n            items => items.classList.remove(classes.active)\r\n        );\r\n        target.closest('li').classList.add(classes.active);\r\n        this.props.onViewspecific(index)\r\n        this.setState({\r\n            bgColorIndex : this.props.bgColor[index]\r\n        })\r\n    }\r\n\r\n    onhandleClickEdit = (items) =>{\r\n        this.setState({\r\n            editForm : !this.state.editForm,\r\n            editItem : items\r\n        })\r\n    }\r\n\r\n    onCloseEditForm =() =>{\r\n        this.setState({\r\n            editForm : false\r\n        })\r\n    }\r\n\r\n    onSubmitEditForm = (e, items, id) =>{\r\n        e.preventDefault();\r\n        let data = {\r\n            items,\r\n            id\r\n        }\r\n        this.props.onSubmitEditContact(data)\r\n        this.setState({\r\n            editForm : !this.state.editForm\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n        let showAddContact = null, viewContact = null, \r\n            viewContactList =null, showEditContact = null;\r\n\r\n        viewContact = (\r\n            <p className={classes.selectText}> Select the contact to view here </p>\r\n        )\r\n\r\n        if(this.state.addForm){\r\n            showAddContact = (\r\n                <AddContact \r\n                    submit={this.onSubmitAddForm}\r\n                    close={this.onShowAddform} \r\n                    show={this.state.addForm}  />\r\n            )\r\n        }\r\n\r\n        if(this.state.editForm){\r\n            showEditContact = (\r\n                <EditContact \r\n                    submitEdit={this.onSubmitEditForm}\r\n                    close={this.onCloseEditForm} \r\n                    item = {this.state.editItem}\r\n                    show={this.state.editForm}  />\r\n            )\r\n        }\r\n\r\n        if(this.props.contactArr.length > 0){\r\n            viewContactList = (\r\n                <div className={classes.viewcontactList}>\r\n                    <ul className={classes.listUl}>\r\n                        <li>\r\n                            <div> + </div>\r\n                            <div> Basic Info </div>\r\n                            <div> Company </div>\r\n                        </li>\r\n                        {this.props.contactArr.map((items, index) =>{\r\n                            if(items.logged !== true){\r\n                                return (<ViewList \r\n                                clickedEdit = {() =>this.onhandleClickEdit(items) }\r\n                                clickedMessage = {() => this.props.onClickMessageIcon(items)}\r\n                                clicked={(e) =>this.onviewContact(e, index)}\r\n                                msgIconDisabled = {findLogged(this.props.contactArr)}\r\n                                svg = {true}\r\n                                key={items.id}\r\n                                bgColor={this.props.bgColor[index]}\r\n                                fullname = {items.FullName}\r\n                                email = {items.Email}\r\n                                company = {items.CompanyName} />)\r\n                            } \r\n                            return false;\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        if(this.props.previewContact){\r\n            viewContact = (\r\n                <ViewContact\r\n                    bgColorIndex={this.state.bgColorIndex !== null ? this.state.bgColorIndex : randomColor()}\r\n                    items={this.props.previewContact} />\r\n            )\r\n        }\r\n\r\n        return(\r\n            <div className={classes.rootContainer}>\r\n                <div className={classes.addcontact}>\r\n                    <Button \r\n                        clicked={()=>this.onShowAddform()} \r\n                        disabled={false}> + Add Contact </Button>\r\n                    {showAddContact}\r\n                    {showEditContact}\r\n                </div>\r\n                <div className={classes.contactWrap}>\r\n                    {viewContactList}\r\n                    {this.props.contactArr.length > 0 ? <div className={classes.previewcontact}>\r\n                        {viewContact}\r\n                    </div> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nlet mapPropsToState = state => {\r\n    return{\r\n        contactArr : state.contactArr,\r\n        previewContact : state.previewContact,\r\n        bgColor : state.bgColor\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = dispatch => {\r\n    return{\r\n        onSubmitAddContact : (items) => (dispatch(actionTypes.onSubmitAddForm(items))),\r\n        onSubmitEditContact : (data) => (dispatch(actionTypes.onSubmitEditForm(data))),\r\n        onViewspecific : (items) => (dispatch(actionTypes.onviewContact(items))),\r\n        onClickMessageIcon : (items) => (dispatch(actionTypes.onClickMessIcon(items))),\r\n        onRandomColors : (items) => (dispatch(actionTypes.onGenerateColor(items)))\r\n    }\r\n}\r\n\r\nexport default connect(mapPropsToState, mapDispatchToProps)(ParentContainer);","import React from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport ViewList from '../../components/viewContact/viewList/viewList';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCaretDown } from '@fortawesome/free-solid-svg-icons';\r\nimport classes from './LoggedUser.module.css';\r\nimport { findLogged } from '../../components/viewContact/ultilities/ultilityFunctions';\r\nimport * as actionTypes from '../hoc/store/Action/action';\r\n\r\nclass LoggedUser extends React.Component{\r\n\r\n    state = {\r\n        showDrop : false,\r\n        loggedUser : \"\"\r\n    }\r\n\r\n    onHandleClick = () =>{\r\n        this.setState({\r\n            showDrop : !this.state.showDrop\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        \r\n        let user = findLogged(this.props.contactArr);\r\n        if(user !== null){\r\n            this.setState({\r\n                loggedUser : user\r\n            })\r\n        }else{\r\n            this.setState({\r\n                loggedUser : \"Select contact\"\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    onClickChange = (items) => {\r\n\r\n        let makefalse = [ ...this.props.contactArr ];\r\n        let checkLogExits= makefalse.map(items=>{\r\n            if(items.logged === true){\r\n                let change = { ...items}\r\n                change.logged = false\r\n                return change\r\n            }else{\r\n                return items\r\n            }\r\n        })\r\n        checkLogExits[items.id - 1].logged = true;\r\n        this.props.onClickChangeUser(checkLogExits)\r\n        document.querySelector('.'+classes.loggedUser+' p span:first-child').innerHTML =  items.FullName;\r\n        this.setState({\r\n            showDrop : !this.state.showDrop\r\n        })\r\n    }\r\n\r\n    render(){\r\n\r\n        let listitems = null;\r\n        if(this.state.showDrop){\r\n            listitems = (\r\n                <ul>\r\n                    {this.props.contactArr.map((items, index) =>{\r\n                        if(items.logged !== true){\r\n                            return (<ViewList \r\n                                clicked = {() => this.onClickChange(items)}\r\n                                key={items.id}\r\n                                svg = {false}\r\n                                bgColor={this.props.bgColor[index]}\r\n                                fullname = {items.FullName}\r\n                            />)\r\n                        }\r\n                        return false;\r\n                    })}\r\n                </ul>\r\n            )\r\n        }\r\n\r\n        return(\r\n            <div className={classes.loggedUser}>\r\n                {this.props.contactArr.length > 0 ? \r\n                <p onClick={() => this.onHandleClick()}>\r\n                    <span>{this.state.loggedUser}</span>\r\n                    <span><FontAwesomeIcon className={classes.downArrow} icon={faCaretDown}/></span>\r\n                </p> : null}\r\n                {listitems}\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nlet mapPropsToState = state => {\r\n    return{\r\n        contactArr : state.contactArr,\r\n        bgColor : state.bgColor\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = dispatch => {\r\n    return{\r\n        onClickChangeUser : (items) => (dispatch(actionTypes.onclickLogUser(items))),\r\n    }\r\n}\r\n\r\nexport default connect(mapPropsToState, mapDispatchToProps)(LoggedUser);","import React from 'react';\r\n\r\nimport classes from './Message.module.css';\r\n\r\nlet Message = (props) =>{\r\n\r\n    let findLogged = props.contactArr.filter(items =>(\r\n        items.logged === true\r\n    ));\r\n\r\n    let messageArr = null;\r\n    if(findLogged.length > 0){\r\n        findLogged.map(items =>(\r\n            messageArr = items.messages.filter(items => (\r\n                items.To === props.toPerson || items.From === props.toPerson\r\n            ))\r\n        ))\r\n    }\r\n\r\n    let styleUnlogged = {\r\n        alignSelf : \"flex-start\",\r\n        textAlign : \"left\"\r\n    }\r\n\r\n    return(\r\n        <ul className={classes.messageChat}>\r\n            {messageArr.length > 0 ? messageArr.map((items, index)=>{\r\n                return <li \r\n                    style={items.From === props.toPerson ? styleUnlogged : null }\r\n                    key={index}>{items.message}</li>\r\n            }) : <li className={classes.nonLi}> No messages to display </li>}\r\n        </ul>\r\n    )\r\n};\r\n\r\nexport default Message;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Backdrop from '../../components/Backdrop/Backdrop';\r\nimport Input from '../../components/Input/Input';\r\nimport classes from './Messaging.module.css';\r\nimport Message from '../../components/Message/Message';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPaperPlane } from '@fortawesome/free-solid-svg-icons';\r\nimport { findLogged } from '../../components/viewContact/ultilities/ultilityFunctions';\r\nimport * as action from '../hoc/store/Action/action';\r\n\r\nclass Messaging extends React.Component{\r\n\r\n    state = {\r\n        inputElement : {\r\n            elementType : \"input\",\r\n            elementProps : {\r\n                type : \"text\",\r\n                autoComplete : \"off\",\r\n                name : 'messageBox',\r\n                placeholder : \"Please enter the message here\"\r\n            },\r\n            value : '' \r\n        },\r\n        errorMsg : true\r\n    }\r\n\r\n    onHandleChange = (e) => {\r\n        let newMessage = { ...this.state.inputElement }\r\n        let target = e.target;\r\n        newMessage.value = target.value;\r\n        if(newMessage.value !== \"\"){\r\n            this.setState({\r\n                inputElement : newMessage,\r\n                errorMsg : false\r\n            })\r\n        }else{\r\n            newMessage.value = \"\";\r\n            this.setState({\r\n                inputElement : newMessage,\r\n                errorMsg : true\r\n            })\r\n        }\r\n    }\r\n\r\n    onclickSendButton = () =>{\r\n        \r\n        let message = { ...this.state.inputElement};\r\n        let contact = [...this.props.contactArr];\r\n        if(message !== \"\"){\r\n            let messageFrom = {\r\n                id : Date.now(),\r\n                From : findLogged(this.props.contactArr),\r\n                To: this.props.toPerson.FullName,\r\n                message :  message.value\r\n            }\r\n            contact.map((items)=>{\r\n                if(items.FullName === messageFrom.From){\r\n                    return items.messages.push(messageFrom)\r\n                }\r\n                if(items.FullName === messageFrom.To){\r\n                    return items.messages.push(messageFrom)\r\n                }\r\n                return items\r\n            })\r\n            message.value = '';\r\n            this.setState({\r\n                inputElement : message,\r\n                errorMsg : true\r\n            })\r\n            return this.props.onAddMsg(contact)\r\n\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render(){\r\n\r\n        let message = null;\r\n        if(this.props.openMsgModal){\r\n            message = (\r\n                <div>\r\n                    <Backdrop clicked={this.props.onCloseMsg} show={this.props.openMsgModal} />\r\n                    <div className={classes.messagingWrap}>\r\n                        <div className={classes.message}>\r\n                            <Message \r\n                                contactArr={this.props.contactArr}\r\n                                toPerson={this.props.toPerson.FullName} /> \r\n                        </div>\r\n                        <div className={classes.messageBox}>\r\n                            <Input  \r\n                                elementProps = {this.state.inputElement.elementProps}\r\n                                changed = { (e) => this.onHandleChange(e) }\r\n                                value = {this.state.inputElement.value} />\r\n                            <FontAwesomeIcon \r\n                                onClick={() => this.onclickSendButton()}\r\n                                className={[\"sendIcon\", this.state.errorMsg ? classes.disabled : null].join(' ')} \r\n                                icon={faPaperPlane} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        \r\n        return message\r\n    }\r\n}\r\n\r\nlet mapPropsToState = state =>{\r\n    return{\r\n        contactArr : state.contactArr,\r\n        openMsgModal : state.openMsgModal,\r\n        toPerson : state.toPerson\r\n    }\r\n}\r\n\r\nlet mapEventToDispatch = dispatch =>{\r\n    return{\r\n        onCloseMsg : () => (dispatch(action.onClickMessIcon())),\r\n        onAddMsg : (contactArr) => (dispatch(action.onAddContactMsg(contactArr)))\r\n    }\r\n}\r\n\r\nexport default connect(mapPropsToState, mapEventToDispatch)(Messaging);","import React from 'react';\nimport './App.css';\nimport ParentContainer from '../src/container/ParentContainer/ParentContainer';\nimport LoggedUser from '../src/container/LoggedUser/LoggedUser';\nimport Messaging from '../src/container/Messaging/Messaging';\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport { faAddressBook } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n    return (\n        <div className='App'>\n            <LoggedUser />\n            <div className=\"heading\">\n                <span>\n                    <FontAwesomeIcon icon={faAddressBook} />\n                </span>\n                <p>Contacts\n                    <span> Welcome to CRM contact page </span>\n                </p>\n            </div>\n            <ParentContainer />\n            <Messaging/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../Action/actionTypes';\r\n\r\nlet contactArr = [\r\n    {\r\n        id : 1,\r\n        FullName : 'vignesh',\r\n        Email : 'vignesh.yes97@gmail.com',\r\n        CompanyName : 'Accenture',\r\n        PhoneNumber : '7708021641',\r\n        Address : 'Coimatore',\r\n        logged : true,\r\n        messages : []\r\n    },\r\n    {\r\n        id : 2,\r\n        FullName : 'person',\r\n        Email : 'person2.@gmail.com',\r\n        CompanyName : 'AnyCompany',\r\n        PhoneNumber : '0987654321',\r\n        Address : '',\r\n        logged : false,\r\n        messages : []\r\n    },\r\n    {\r\n        id :3, \r\n        FullName : 'testing',\r\n        Email : 'testing.yes97@gmail.com',\r\n        CompanyName : '',\r\n        PhoneNumber : '8989898989',\r\n        Address : 'something !!!',\r\n        logged : false,\r\n        messages : []\r\n    },\r\n    {\r\n        id :4,\r\n        FullName : 'kenau reeves',\r\n        Email : 'kenau.reeves@gmail.com',\r\n        CompanyName : 'High Table',\r\n        PhoneNumber : '789789789',\r\n        Address : 'something !!!',\r\n        logged : false,\r\n        messages : []\r\n    },\r\n    {\r\n        id : 5,\r\n        FullName : 'Jacks Sparrow',\r\n        Email : 'jacks@gmail.com',\r\n        CompanyName : 'Black Pearl',\r\n        PhoneNumber : '9090909090',\r\n        Address : '',\r\n        logged : false,\r\n        messages : []\r\n    }\r\n]\r\n\r\nlet initialState = {\r\n    contactArr : [ ...contactArr  ],\r\n    previewContact : null,\r\n    openMsgModal : false,\r\n    toPerson : null,\r\n    bgColor : []\r\n}\r\n\r\nlet rootReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type){\r\n\r\n        case (actionTypes.ONSUBMIT_ADDCONTACT):\r\n            let newContactObj = {};\r\n            for(let i in action.value){\r\n                newContactObj[i] = action.value[i].value\r\n            }\r\n            newContactObj.id = state.contactArr.length + 1;\r\n            newContactObj.logged = false;\r\n            newContactObj.messages = [];\r\n            return {\r\n                ...state,\r\n                contactArr : [\r\n                    ...state.contactArr,\r\n                    newContactObj\r\n                ]\r\n            }\r\n\r\n        case (actionTypes.ONSUBMIT_EDITCONTACT):\r\n            let Contacteditted = {};\r\n            for(let i in action.value.items){\r\n                Contacteditted[i] = action.value.items[i].value\r\n            }\r\n            let newContactedit = [ ...state.contactArr ];\r\n            newContactedit[action.value.id-1] = {...newContactedit[action.value.id-1], ...Contacteditted}\r\n            return {\r\n                ...state,\r\n                contactArr : newContactedit,\r\n                previewContact : newContactedit[action.value.id-1],\r\n            }\r\n\r\n        case (actionTypes.ONVIEWCONTACT):\r\n            return {\r\n                ...state,\r\n                previewContact : state.contactArr[action.value]\r\n            }\r\n\r\n        case (actionTypes.ONCHANGE_LOGUSER):\r\n            return {\r\n                ...state,\r\n                contactArr : action.value\r\n            }\r\n\r\n        case (actionTypes.ONCLICK_MSGBOX):\r\n            return {\r\n                ...state,\r\n                toPerson : action.value, \r\n                openMsgModal : !state.openMsgModal\r\n            }\r\n        \r\n        case (actionTypes.ONADD_MSGUSER):\r\n            return{\r\n                ...state,\r\n                contactArr : action.value\r\n            }\r\n\r\n        case (actionTypes.RANDOM_BGCOLOR):\r\n            let bgColor = [ ...state.bgColor, action.value]\r\n            return{\r\n                ...state,\r\n                bgColor : bgColor\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport rootReducer from '../src/container/hoc/store/Reducers/rootReducer';\n\nlet store = createStore(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}> <App /> </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}